(deflisten workspaces-left :initial "[]" "bash ~/.config/eww/scripts/get-workspaces-1")
(deflisten current_workspace_left :initial "101" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces-left []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace-1 {} ${current_workspace_left}" :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces-left}${current_workspace_left}" :visible false)
      (for workspace in workspaces-left
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}" 
          (box :class "workspace-entry ${workspace.id == current_workspace_left ? "current-left" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${replace(workspace.id, "10", "")}")
            )
          )
        )
      )
    )
  )

(deflisten workspaces-center :initial "[]" "bash ~/.config/eww/scripts/get-workspaces-2")
(deflisten current_workspace_center :initial "201" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces-center []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace-2 {} ${current_workspace_center}" :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces-center}${current_workspace_center}" :visible false)
      (for workspace in workspaces-center
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace_center ? "current-center" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${replace(workspace.id, "20", "")}")
            )
          )
        )
      )
    )
  )

(deflisten workspaces-right :initial "[]" "bash ~/.config/eww/scripts/get-workspaces-3")
(deflisten current_workspace_right :initial "301" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces-right []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace-3 {} ${current_workspace_right}" :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces-right}${current_workspace_right}" :visible false)
      (for workspace in workspaces-right
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace_right ? "current-right" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${replace(workspace.id, "30", "")}")
            )
          )
        )
      )
    )
  )

(defwidget left-bar []
  (box :orientation "h"
    (left-bar-start)
  ))

(defwidget center-bar []
  (centerbox  :orientation "h"
    (center-bar-start)
    (music)
    (sidestuff)))

(defwidget left-bar-start []
  (box :orientation "h"
    :space-evenly "false" 
    :halign "start" 
    (launcher)
    (workspaces-left)))

(defwidget center-bar-start []
  (box :orientation "h"
       :space-evenly "false" 
       :halign "start" 
       (launcher)
       (workspaces-center)))

(defwidget right-bar-start []
  (box :orientation "h"
    :space-evenly "false" 
    :halign "start" 
    (launcher)
    (workspaces-right)))

(defwidget right-bar []
  (box :orientation "h"
    (right-bar-start)
  ))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (date-time)
    (speaker)
    (keyboard)
    (battery)
    (tray)
    (power-menu-btn)))



;; Launcher Widgets ;;
(defwidget launcher []
	(box :orientation "h" 
		 :space-evenly "false" 
  	(button :class "launcher-icon" 
		   	:onclick "scripts/popup launcher"  "")))

;; Keboard Widgets ;;
(defwidget keyboard []
	(box :orientation "h" 
		 :space-evenly "false" 
  	(button :class "keyboard-icon" 
		   	:onclick "scripts/popup launcher"  "󰥻")))

;; Battery Widgets ;;
(defwidget battery []
	(box :orientation "h" 
		 :space-evenly "false" 
  	(button :class "battery-icon" 
		   	:onclick "scripts/popup launcher"  "󱊣")))

;; Keboard Widgets ;;
(defwidget speaker []
	(box :orientation "h" 
		 :space-evenly "false" 
  	(button :class "speaker-icon" 
		   	:onclick "scripts/popup launcher"  "")))

;; Power Menu Widgets ;;
(defwidget power-menu-btn []
	(box :orientation "h" 
		 :space-evenly "false" 
  	(button :class "power-menu-icon" 
		   	:onclick "scripts/popup launcher"  "")))


(defwidget music []
  (box :class "music"
       :orientation "h"
       
    ))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll date :interval "1s"
  "date '+%b %d, %Y'")

(defpoll time :interval "1s"
  "date '+%H:%M'")

(defwidget date []
  (box :orientation "h" 
      :class "date"
      :space-evenly "false" 
      :halign "center"
      date
  ))  


(defwidget time []
  (box :orientation "h" 
      :class "time"
      :space-evenly "false" 
      :halign "center"
      time
  ))  

(defwidget date-time []
  (box :orientation "v" 
      :class "date-time"
      :space-evenly "false" 
      (time)
      (date)
  )) 
  
(defwidget tray []
  (box :orientation "v" 
      :class "tray"
      :space-evenly "false" 
      tray
  )) 
(defwindow left-bar 
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "32px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (left-bar))

(defwindow center-bar
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "-32"
                      :width "100%"
                      :height "32px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (center-bar))

(defwindow right-bar
  :monitor 2
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "32px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (right-bar))

(
  deflisten tray
  :initial ""
  "./scripts/start_tray.sh"
)